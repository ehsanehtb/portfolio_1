/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 .\public\models\667911f75b9b62b38a2e383e.glb 
*/

import React, { useEffect, useRef } from "react";
import { useAnimations, useFBX, useGLTF, useScroll } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { MathUtils } from "three";

export function Avatar(props) {
  const { animation, section } = props;
  const group = useRef();
  const data = useScroll();

  const { nodes, materials } = useGLTF("models/667911f75b9b62b38a2e383e.glb");

  const { mouse } = useThree();

  const { animations: sittingAnimation } = useFBX("animations/Sitting.fbx");
  const { animations: standUpAnimation } = useFBX("animations/Stand Up.fbx");
  const { animations: greetingAnimation } = useFBX(
    "animations/Standing Greeting.fbx"
  );
  const { animations: standingAnimation } = useFBX(
    "animations/Standing Idle.fbx"
  );

  sittingAnimation[0].name = "Sitting";
  standUpAnimation[0].name = "StandingUp";
  greetingAnimation[0].name = "Greeting";
  standingAnimation[0].name = "Standing";

  const { actions } = useAnimations(
    [
      sittingAnimation[0],
      standUpAnimation[0],
      greetingAnimation[0],
      standingAnimation[0],
    ],
    group
  );

  useFrame(() => {
    const head = group.current.getObjectByName("Head");
    const curSection = Math.floor(data.scroll.current * data.pages);
    let x;
    let y;

    if (head) {
      if (curSection === 3) {
        x = 0.4; //-0.21
        y = 0.4; // 0.33
      } else {
        // Map mouse position to a range
        x = MathUtils.clamp(mouse.x * 2, -1, 1); // Mouse x position mapped to range [-1, 1]
        y = MathUtils.clamp(mouse.y * 2, -1, 1);
      }

      // Set rotation angles with limitations
      const rotationX = MathUtils.lerp(head.rotation.x, -y * 2.5, 0.1);
      const rotationY = MathUtils.lerp(head.rotation.y, x * 5, 0.1);

      head.rotation.set(rotationX, rotationY, 0);
    }
  });

  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/667911f75b9b62b38a2e383e.glb");
